import sqlite3
import random
# import datetime
import time


cursor = None
connection = None

def init_bd():
    global connection, cursor
    try:
        print('DataBase was launched')
        with sqlite3.connect('DataBase.db') as connection:
            cursor = connection.cursor()

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS chuvash_words(
                id INTEGER PRIMARY KEY,
                chuvash TEXT NOT NULL
            )              
            ''')

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS russian_words (
                id INTEGER PRIMARY KEY,
                russian TEXT NOT NULL
            )
                        
            ''')

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS translations (
                russian_id INTEGER NOT NULL,
                chuvash_id INTEGER NOT NULL,
                PRIMARY KEY (russian_id, chuvash_id),
                FOREIGN KEY (russian_id) REFERENCES russian_words (id) ON DELETE CASCADE,
                FOREIGN KEY (chuvash_id) REFERENCES chuvash_words (id) ON DELETE CASCADE
            )           
            ''')
            connection.commit()
    except sqlite3.Error as e:
        print(f'Database error: {e}')
    
    except Exception as e:
        print(f'Error: {e}')

def get_random_word():
    try:
        table = random.choice(['chuvash','russian'])
        cursor.execute(f'SELECT {table} FROM {table}_words ORDER BY RANDOM() LIMIT 1') #f-—Å—Ç—Ä–æ–∫–∏ –≤ sql –æ–ø–∞—Å–Ω–æ!
        # if table == 'chuvash':
        #     cursor.execute('SELECT chuvash FROM chuvash_words ORDER BY RANDOM() LIMIT 1')
        # else:
        #     cursor.execute('SELECT russian FROM russian_words ORDER BY RANDOM() LIMIT 1')
        result = cursor.fetchone()
        if result is not None:
            return result[0]
        
    except Exception as e:
        print(f'Error {e}')
        return False

def correct_word(random_word):
    try:
        cursor.execute('SELECT id FROM chuvash_words WHERE chuvash=?', (random_word,))
        chuvash_word_id = cursor.fetchone() 

        cursor.execute('SELECT id FROM russian_words WHERE russian=?', (random_word,))
        russian_word_id = cursor.fetchone() 
        
        if chuvash_word_id is not None:
            cursor.execute('''
                SELECT r.russian
                FROM russian_words r JOIN translations t
                on t.russian_id = r.id
                WHERE t.chuvash_id = ?''', (chuvash_word_id))

        elif russian_word_id is not None:
            cursor.execute('''
                SELECT c.chuvash
                FROM chuvash_words c JOIN translations t
                on t.chuvash_id = c.id
                WHERE t.russian_id = ?''', (russian_word_id))
        traslation_result = cursor.fetchone()
        return traslation_result[0] if traslation_result is not None else None

    except Exception as e:
        print(f'Error {e}')
        return False



def is_translation_correct(random_word, user_word):
    #–ø–æ—á–∏—Ç–∞—Ç—å –∏ —É–∑–Ω–∞—Ç—å –ø—Ä–æ [0] —Å fetch
    user_word = user_word.lower()
    try:
        # print(f"DEBUG: random_word='{random_word}', user_word='{user_word}'")
        cursor.execute('SELECT id FROM chuvash_words WHERE chuvash=?', (random_word,)) 
        chuvash_word_id = cursor.fetchone()

        cursor.execute('SELECT id FROM russian_words WHERE russian=?', (random_word,)) 
        russian_word_id = cursor.fetchone()

        if (chuvash_word_id is None and russian_word_id is None):
            return False
        

        if chuvash_word_id is not None:
            cursor.execute(f'SELECT id FROM russian_words WHERE russian="{user_word}" ') #–µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ EXISTS #—Ç–∞–∫–∂–µ —ç—Ç–æ –µ—â–µ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∫ :/ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—á–µ–º—É
            user_word_id = cursor.fetchone()

            if user_word_id is None:
                return False  # user_word –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä—É—Å—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ

            cursor.execute('SELECT * FROM translations WHERE chuvash_id=? AND russian_id=?', (chuvash_word_id[0],user_word_id[0],))


        elif russian_word_id is not None:
            cursor.execute(f'SELECT id FROM chuvash_words WHERE chuvash="{user_word}" ') #–µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ EXISTS #—Ç–∞–∫–∂–µ —ç—Ç–æ –µ—â–µ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∫ :/ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—á–µ–º—É
            user_word_id = cursor.fetchone()

            if user_word_id is None:
                return False 

            cursor.execute('SELECT * FROM translations WHERE chuvash_id=? AND russian_id=?', (user_word_id[0], russian_word_id[0],))

        result = cursor.fetchone()
        return bool(result)
    
    except Exception as e:
        print(f'Error {e}')
        return False


def print_rules():
    """–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    
    rules = [
        "üìù –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:",
        "üé≤ –°–ª—É—á–∞–π–Ω–æ –≤—ã–ø–∞–¥–∞—é—Ç —Å–ª–æ–≤–∞ –Ω–∞ —á—É–≤–∞—à—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º",
        "üí≠ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
        "‚úÖ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +1 –±–∞–ª–ª",
        "‚ùå –ó–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: -1 –±–∞–ª–ª",
        "üèÜ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π ",
        "üèÜ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:",
        "‚è∏Ô∏è  –í–≤–µ–¥–∏ 'q', 'quit' –∏–ª–∏ 'exit' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏"
    ]
    

    for rule in rules:
        print(f"üìå {rule}")
    print()

def print_game_intro():
    """–ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Å —ç–º–æ–¥–∑–∏"""
    
    intro_messages = [
        "üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ò–ì–†–£ '–ü–ï–†–ï–í–û–î–ß–ò–ö'! üéÆ",
        " –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —á—É–≤–∞—à—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤! ",
        "üöÄ –ì–æ—Ç–æ–≤ –∫ –≤—ã–∑–æ–≤—É? –ù–∞—á–∏–Ω–∞–µ–º! üöÄ"
    ]
    
    print("‚ú®" * 30)
    for message in intro_messages:
        print(f"‚ú® {message:^50} ‚ú®")
    print("‚ú®" * 30)
    print()
def print_game_over(final_score, target_score):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã"""
    
    print("\n" + "üéä" * 30)
    
    if final_score >= target_score:
        achievements = [
            f"üèÜ –¢–´ –ü–û–ë–ï–î–ò–õ! –ù–∞–±—Ä–∞–Ω–æ {final_score} –∏–∑ {target_score}!",
            f"üéØ –í–ï–õ–ò–ö–û–õ–ï–ü–ù–û! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {final_score}/{target_score}",
            f"‚≠ê –ú–ê–°–¢–ï–† –ü–ï–†–ï–í–û–î–ê! {final_score} –æ—á–∫–æ–≤!"
        ]
        print(random.choice(achievements))
        print("ü•á –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª–∏–≥–ª–æ—Ç! ü•á")
        
    else:
        motivations = [
            f"üí™ –ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ù–∞–±—Ä–∞–Ω–æ {final_score} –∏–∑ {target_score}",
            f"üìö –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
            f"üå± –ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É!"
        ]
        print(random.choice(motivations))
    
    print("üéä" * 30)
    print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ! üëã")

    
def print_score(current_score, target_score):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞"""
    progress = min(current_score / target_score * 100, 100) if target_score > 0 else 0
    
    print(f"\n‚≠ê –¢–í–û–ô –°–ß–ï–¢: {current_score}/{target_score}")
    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{ '‚ñà' * int(progress/5) }{ '‚ñë' * (20 - int(progress/5)) }] {progress:.1f}%")
    
    if current_score > 0:
        print(f"üéØ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: {max(0, target_score - current_score)} –æ—á–∫–æ–≤")
    print()    


def main():
    init_bd()
    print_game_intro()
    print_rules()


    target_score = int(input('–î–æ —Å–∫–æ–ª—å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–≥—Ä–∞–µ–º? :  '))
    current_score = 0 

    while current_score != target_score:
        time.sleep(2)
        print_score(current_score, target_score)
        random_word = get_random_word()
        user_word = input(f'–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ "{random_word}": ')


        if user_word in ('q', 'quit', 'exit'):
            break

        if is_translation_correct(random_word, user_word):
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! +1 –±–∞–ª–ª")
            current_score += 1
            print(f"‚úÖ –û–±—â–∏–π —Å—á–µ—Ç: {current_score}")
        else:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word(random_word)}")
            if current_score !=0: current_score -= 1
            print(f"‚ùå –û–±—â–∏–π —Å—á–µ—Ç: {current_score}")
            
    print_game_over(current_score, target_score)      




if __name__ == "__main__":
    main()







#–¢–∞–π–º–µ—Ä –º–±
# —Ä–µ–∂–∏–º—ã —Å —á–≤—à –Ω–∞ —Ä—É—Å, —Å —Ä—É—Å –Ω–∞ —á–≤—à
# –í–∏–¥—ã –∏–≥—Ä—ã –≤ –æ–±—Å–∏–¥–∏–∞–Ω–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä  
